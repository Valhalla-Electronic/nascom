#!/usr/bin/perl
#
# script to use the z0 disassembler to reverse the m5.bin file

use warnings;
use CPU::Z80::Disassembler;

my $file_name = "m5.bin";
my $addr = 0xc50;
my $file = "m5.txt";
my $asm_file = "m5.asm";


$dis = CPU::Z80::Disassembler->new;
$dis->memory->load_file($file_name, $addr);
$dis->write_dump($file);

# mock up stuff for NAS-SYS RST codes

###########################################
# RST 0 - START

###########################################
# RST 8 - RIN

###########################################
# RST 10 - RCAL
## TODO put the actual code thread in here so that it can be followed.
##$dis->memory->poke(0x10, 0xc9);
##$dis->code(0x10);
##$dis->set_call(0x10, \&handle_rcal);

# advance return PC past in-line subroutine code
sub handle_rcal {
    my $addr = $_[1];
    $dis->defb($addr);
    return $addr+1;
}

###########################################
# RST 18 - SCAL
##$dis->memory->poke(0x18, 0xc9);
##$dis->code(0x18);
##$dis->set_call(0x18, \&handle_scal);

# advance return PC past in-line subroutine code
sub handle_scal {
    my $addr = $_[1];
    $dis->defb($addr);
    return $addr+1;
}

###########################################
# RST 20 - BRKPT

###########################################
# RST 28 - PRS
$dis->memory->poke(0x28, 0xc9);
$dis->code(0x28);
$dis->set_call(0x28, \&handle_prs);

# advance return PC past in-line null-terminated string
sub handle_prs {
    my $ref = $_[0];
    my $addr = $_[1];

    my $start = $addr;
    my $len = 0;
    my $is_string;
    while (1) {
        my $byte = $dis->memory->peek($addr);
        if (($byte > 31) and ($byte < 128)) {
            # printable
            if (($len == 0) or ($is_string==1)) {
                # string, new section, first of section OR
                # string continue existing section
                $len += 1;
                $addr += 1;
                $is_string = 1;
            }
            else {
                # byte -> string change
                if ($gen_label) {
                    $dis->defb($start, $len, $label);
                    $gen_label = 0;
                }
                else {
                    $dis->defb($start, $len);
                }
                $len = 1;
                $is_string = 1;
                $start = $addr;
                $addr += 1;
            }
        }
        else {
            # not printable
            if (($len == 0) or ($is_string==0)) {
                # byte, new section, first of section OR
                # byte continue existing section
                $len += 1;
                $addr += 1;
                $is_string = 0;
            }
            else {
                # string -> byte change
                if ($gen_label) {
                    $dis->defm($start, $len, $label);
                    $gen_label = 0;
                }
                else {
                    $dis->defm($start, $len);
                }
                $len = 1;
                $is_string = 0;
                $start = $addr;
                $addr += 1;
            }
        }
        last if ($byte==0);
    }

    # emit the final section
    if ($len != 0) {
        if ($is_string) {
            if ($gen_label) {
                $dis->defm($start, $len, $label);
            }
            else {
                $dis->defm($start, $len);
            }
        }
        else {
            if ($gen_label) {
                $dis->defb($start, $len, $label);
            }
            else {
                $dis->defb($start, $len);
            }
        }
    }
    return $addr;
}

###########################################
# RST 30 - ROUT
##$dis->memory->poke(0x30, 0xc9);
##$dis->code(0x30);

###########################################
# RST 38 - RDEL
##$dis->memory->poke(0x38, 0xc9);
##$dis->code(0x38);

###########################################
# NAS-SYS initialisation routine
##$dis->memory->poke(0xd, 0xc9);
##$dis->code(0xd,"STMON");

###########################################
# NAS-SYS entry point
# Never actually come back from here, but
# model it as "ret"
##$dis->memory->poke(0x5, 0xc9);
##$dis->code(0x5,"NAS");


###########################################
# Stuff specific to the code being disassembled

# workspace
##for ($i=0xc000; $i<0xc00f; $i=$i+1) {
##    $dis->memory->poke($i, 0);
##}


# 1/ port the code that does strings properly!!
# 2/ understand the T4 calls.


$dis->block_comment(0xc60,";;; Program entry point");
$dis->code(0xc60,"ENTRY");
$dis->block_comment(0xc50,';;; ========================================================
;;; M5 Interpreter for NASCOM
;;; Uses these calls into NASBUG T2 monitor:
;;; RST $28   -- print in-line string; string is terminated by 00.
;;; CALL $13b -- print character in A.
;;; CALL $3e  -- wait for input character, return it in A.
;;;
;;; It is a peculiarity of T2 that it uses non-standard
;;; codes instead of ASCII for some operations:
;;; $1f for carriage-return
;;; $1d for backspace
;;;
;;; User program is stored starting at SOP ($efe) and is
;;; terminated with two bytes of 0. In the code, the address
;;; SOP-1 is loaded in multiple places, because it is
;;; incremented before use. I defined name SOPM1 for
;;; this address ($efd). A little rearrangement would
;;; allow SOP to be used consistently in the code, which
;;; would make the code clearer.
;;;
;;; There are 27 16-bit variables, named @ and A-Z which
;;; are accessed based on their ASCII codes $40-$5a
;;; respectively.
;;;
;;; Variables are stored starting at $bc0
;;; which is the top (non-scrolled) line of the memory
;;; -mapped display, which means that they are visible
;;; before and after the program is running!
;;;
;;; The editor does direct read/write to 1 location at
;;; the right-hand side of the top (non-scrolled) line
;;; of the memory-mapped display: location $bf6
;;;
;;; Within the program, register assignment is as
;;; follows:
;;;
;;; DE  -- stores the current value, \'x\'.
;;; IX  -- during program execution, stores the address
;;;        of the program symol currently being executed.
;;; SP  -- the system stack holds values stacked by the
;;;        user program (pop returns \'y\').
;;;
;;; memory scratch ?? none??
;;;
;;; ========================================================


;;; A specifies a variable. $40 is @, $41 is A.. $5A is Z.
;;; fetch value of referenced variable into DE (\'x\')');
$dis->code(0xc50,"GETVAR");
$dis->block_comment(0xc74,";;; Symbol: display value of x (DE) in decimal");
$dis->block_comment(0xe0a,";;; Look-up table for hex->decimal conversion
;;; 1, 16-bit value for each of the 5 decimal output digits
;;; in decimal, values are: 10000, 1000, 100, 10, 1");
$dis->defw(0xe0a,5,"NUMTAB");
$dis->code(0xc74,"NUMOUT");
$dis->code(0xc7a,"NUMO1");
$dis->code(0xc81,"NUMO2");
$dis->code(0xc88,"NUMO3");
$dis->code(0xc8e);
$dis->block_comment(0xc95,"\n;;; fall through or end up here to point to next symbol..");
$dis->code(0xc95,"NEXT");
$dis->block_comment(0xc97,"\n;;; ..and process it");
$dis->code(0xc97,"SYMBOL");
$dis->block_comment(0xc5a,";;; Symbol: - -- subtract: x:=x - TOS");
$dis->code(0xc5a,"SUB");

$dis->block_comment(0xe3a,"\n;;; Mark end of program at HL: two bytes of 0.
;;; TODO is the 2nd 0 necessary?? -- there might be some scenario where
;;; you incorrectly end a program with a ) maybe a label search would not stop??");
$dis->code(0xe3a,"MARKEOP");

$dis->block_comment(0xe3e,"\n;;; Command loop
;;; TODO it would be tidier and same code size to avoid the double fall-through");
$dis->code(0xe3e,"MONITOR");
$dis->block_comment(0xc63,";;; Symbol: ? -- prompt with ? and get numeric input from user into x (DE)");
$dis->code(0xc63,"NUMIN");
$dis->code(0xc69,"NUMI1");
$dis->block_comment(0xcdc,";;; Symbol: , -- push x onto stack");
$dis->code(0xcdc,"STAKIT");
$dis->block_comment(0xce3,";;; Symbol: = -- assign or =? -- print number");
$dis->code(0xce3,"ASSIGN");
$dis->block_comment(0xd74,";;; Symbol: ) -- branch. Check condition
;;; 8 conditions are:  Nonzero Uncon Zero Equal Xoteq Lessoreq Greatoreq Monitor
;;; TODO would save 2 bytes to move the inc ix from the end to here: then remove one inc ix each from NOBRA and BRA");
$dis->code(0xd74,"BRACHK");
$dis->block_comment(0xcff,";;; Symbol: Â£ -- decrement: x:=x - 1");
$dis->code(0xcff,"DEC");
$dis->block_comment(0xcfc,";;; Symbol: % -- increment: x:=x + 1");
$dis->code(0xcfc,"INC");
$dis->block_comment(0xcf7,";;; Symbol: + -- add: x:=x + TOS");
$dis->code(0xcf7,"ADD");
$dis->block_comment(0xd02,";;; Symbol: * -- multiply: x:=x * TOS, \@:=overflow");
$dis->code(0xd02,"MUL");
$dis->code(0xd08,"MUL1");
$dis->code(0xd10,"MUL2");
$dis->code(0xd1c,"MUL3");
$dis->block_comment(0xd1d,"\n;;; Store in variable @");
$dis->code(0xd1d,"STOREAT");
$dis->block_comment(0xd23,";;; Symbol: / -- divide: x:=x / TOS, \@:=remainder");
$dis->code(0xd23,"DIV");
$dis->code(0xd29,"DIV1");
$dis->code(0xd2b,"DIV2");
$dis->code(0xd33,"DIV3");
$dis->code(0xd3c,"DIV4");

$dis->block_comment(0xcdf,";;; Symbol: ( -- label. Just step past the label identifier
;;; TODO optimisation: could this be merged with FALSE?");
$dis->code(0xcdf,"LABEL");
$dis->code(0xd41,"STRING");
$dis->block_comment(0xd54,";;; Either a variable @, A-Z or an unknown symbol (in which case, error)");
$dis->block_comment(0xd5a,"\n;;; Convert/accumulate inline number from ASCII string into x (DE) -- like NUMIN");
$dis->code(0xd54,"WHAT");
$dis->code(0xd6d,"ERRSYM");
$dis->code(0xdcb,"ERROR");

$dis->block_comment(0xdac,";;; Branch if x (in DE) is non-0");
$dis->code(0xdac,"NONZER");
$dis->block_comment(0xda6,";;; Branch if x (in DE) is 0");
$dis->code(0xda6,"ZERO");
$dis->code(0xdb2,"EQUAL");
$dis->code(0xdb5,"NOTEQU");
$dis->block_comment(0xdb8,";;; TODO ?? what's going on here with the dec/inc");
$dis->code(0xdb8,"LESEQU");
$dis->code(0xdbd,"GRTEQU");

$dis->block_comment(0xdc0,"\n;;; not-taken branch. Skip past brace and condition: point to jump symbol, then continue");
$dis->code(0xdc0,"NOBRA");
$dis->block_comment(0xdda,"\n;;; Branch unconditionally
;;; also end up here for conditional branches that are to be taken. Search for destination
;;; at 0ddd 31 fa 0f correct? LD SP, \$0FFA -- cannot be correct: it would clear the user stack
;;; but neither B1 nor 81 would work here, and code looks good without this instruction.
;;; first, search for ( \$28 to indicate a label, then check the jump symbol to see if it's the one we want
;;; TODO bug: if you use a label like this: (( and it's not the first label a branch from BRALAB to BRA1 will
;;; load and check the second ) instead of stepping past it. Trivial to fix.");
$dis->code(0xdda,"BRA");
$dis->code(0xde5,"BRA1");

$dis->code(0xda8,"BRAIFZ");
$dis->code(0xdae,"BRAIFNZ");


$dis->block_comment(0xdf7,"\n;;; found branch label. Does the destination symbol match?");
$dis->code(0xdf7,"BRALAB");

$dis->block_comment(0xded,"\n;;; found 0 (end of program) without finding branch destination. Skip past brace and
;;; condition: point to jump symbol, then report error");
$dis->block_comment(0xdfb,"\n;;; yes, found match. Move symbol address to IX then continue with next symbol");

$dis->code(0xdc7,"ID");


#$dis->code(0xe0a,"XXX");

$dis->block_comment(0xe25,";;; Get input character, echo it and return it in A");
$dis->code(0xe25,"ECHO");
$dis->code(0xe28);

$dis->block_comment(0xe2b,";;; List command: display until end-of-program (indicated by 0)
;;; also, called as a subroutine from Edit loop.");
$dis->code(0xe2b,"LIST");
$dis->code(0xe31,"LIST1");
$dis->block_comment(0xed3,";;; Input command: message, CR then get/store user program");
$dis->code(0xed3,"INPUT");
$dis->code(0xedd,"INOK");
$dis->code(0xede,"INBAK");

$dis->block_comment(0xe54,";;; fall-through to Run command: CR then start executing symbols at SOP");
$dis->code(0xe5e,"NOTRUN");

$dis->block_comment(0xe61,";;; fall-through to Edit command");
$dis->code(0xdfe,"NEXTI");

$dis->block_comment(0xeb8,";;; Delete sub-command of Edit command
;;; copy the program back by 1 byte; loop until end of program marker copied");
$dis->code(0xeb8,"DELETE");
$dis->code(0xebb,"DEL1");
$dis->code(0xe65,"EDIT");
$dis->code(0xe77,"EDLOP1");
$dis->block_comment(0xe86,";;; > (right) sub-command of Edit command");
$dis->code(0xe87,"NOTRT");

$dis->code(0xe8c,"EDLOP2");
$dis->code(0xe9c,"EDLOP3");
$dis->code(0xea4,"EDLOP4");


$dis->block_comment(0xe8b,";;; < (left) sub-command of Edit command");
$dis->block_comment(0xeb2,";;; Rewind sub-command of Edit command
;;; TODO the coding here is perverse! Loading with SOP+1 then decrementing! And can all be
;;; eliminated by jumping to the start of the edit command.. save 6 bytes");
$dis->code(0xeb2,"REWIND");
$dis->block_comment(0xec8,";;; NextLine sub-command of Edit command
;;; advance pointer past next newline, or stop at end");
$dis->code(0xec8,"NEXTLN");
$dis->block_comment(0xe01,";;; A indicates a variable; 1 -> \@, 2 -> A, 3 -> B, 27 -> Z
;;; double it (16-bit variables) then add to variables start address - 2 (\$bbe)
;;; to get address of storage. Would have been cleaner to index this from 0!!");

$dis->code(0xe01,"VARADR");

$dis->block_comment(0xe14,"\n;;; TODO ??? Return C if ASCII in A is non-numeric, otherwise
;;; multiply HL by 10 and add in value from A");
$dis->code(0xe14,"XXXNUM");



# start of user program is one location after this
$dis->memory->poke(0xefd, 0x00);
$dis->memory->poke(0xefe, 0x00);
$dis->defb(0xefd, 1, "SOPM1");
$dis->defb(0xefe, 1, "SOP");



#$dis->defw(0xc000, 1, "WORKSP");
#$dis->defb(0xc000, 1, "MDRV");
#$dis->defb(0xc001, 1, "DDRV");
#$dis->defb(0xc002, 1, "DRVCOD");
#$dis->defb(0xc003, 1, "FIRST");
#$dis->defb(0xc004, 1, "ERRFLG");
#$dis->defb(0xc005, 1, "ERRCOD");



# ??
#$dis->memory->poke(0x5, 0xc9);
#$dis->set_type_code(0x5);
#$dis->set_call(0x5, \&handle_xx);
#$dis->memory->poke(0x45, 0xc9);
#$dis->set_type_code(0x45);
#$dis->set_call(0x45, \&handle_xx);

sub handle_xx {
    my $ref = $_[0];
    my $addr = $_[1];
    printf "Unknown entry being called at 0x%04x\n", $addr;
    return $addr;
}

##$dis->code(0xd003,"Ent2");
###$dis->set_type_code(0xd000,10);
##$dis->set_call(0xd000, 1);

# messages - arguments to RST PRS
##$dis->defm(0xd00a,18);
##$dis->defm(0xd2cc,7);
##$dis->defm(0xd305,14);


# Each ->code() address is followed through to a RET
##$dis->code(0xd01d,"PDC1");
##$dis->defb(0xd51b, (0xd540 - 0xd51b + 1) );
##$dis->code(0xd6fa,"RWR6");



# This can optimise code and so it may prevent 100% match
# on re-assembly.
##$dis->analyse;
$dis->write_asm($asm_file);
